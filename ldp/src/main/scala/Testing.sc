
sealed trait Process1[I,O] {

}

case class Halt[I,O]() extends Process1[I,O]

case class Emit[I,O](head: Seq[O],tail: Process1[I,O]=Halt[I,O]()) extends Process1[I,O]

case class Await[I,O](recv: I => Process1[I,O], fallback: Process1[I,O]=Halt[I,O]()) extends Process1[I,O]












































































































































































































































































































































































































































































































































































































































































































































